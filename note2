Configurare nel file env le due variabili

	WORKING_DIRECTORY=$HOME/.hsh-work
	CONFIG_FILE=${WORKING_DIRECTORY}/config.json

WORKING_DIRECTORY è la variabile dove sarà presente il file json (e potrà essere utilizzata per altri scopi)

Configurare il config.json come da documentazione


----------------------

Clone del repository
Crea la directory .hsh-work nella home directory dell'utente root
	mkdir $HOME/.hsh-work
Copia il file example.config.json in $HOME/.hsh-work/config.json
Configura la variabile "base_path" del file config.json con il path dove inserire tutti i file id progetto per la parte ws


--------

Let's encrypt

Conviene creare un docker acme.sh che può vedere i fs di certificati e docroot del webserver
Tramite script hsh.sh gestire il rinnovo (che configurerà in automatico)

Mettere a cron il riavvio del container del webserver







---------------


Prerequisiti


Iniziare la procedura di installazione

Configurare le directory (utente root) nel file delle variabili

	DIRECTORY_LOGS_NPM=/projects/npm/logs

Lanciare il comando sysctl -w vm.max_map_count=262144


Fare il pull

Lanciare elastic
docker-compose -p hsh -f hsh.yaml up --build -d elastic_master

Lanciare il reset password dell'utente elastic

OK_ELASTIC=2
while [ ${OK_ELASTIC} != 0 ] ; do
	ELASTIC_PASSWORD=$(docker exec -it elastic_master /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic -b -s 2>/dev/null)
	OK_ELASTIC=$?
done;
sed -i "s/ELASTIC_PASSWORD=.*/ELASTIC_PASSWORD=${ELASTIC_PASSWORD}/g" variables 


Prendere nota della password stampata in output

Creare l'enrollment token per il nodo data cold

OK_ELASTIC=2
while [ ${OK_ELASTIC} != 0 ] ; do
	ELASTIC_ENROLLMENT=$(docker exec -it elastic_master /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s node 2>/dev/null)
	OK_ELASTIC=$?
done;
sed -i "s/ELASTIC_ENROLLMENT=.*/ELASTIC_ENROLLMENT=${ELASTIC_ENROLLMENT}/g" variables 



Lanciare il nodo elastic cold

docker-compose -f search-compose.yaml up -d --build elastic_cold


Prendere nota del token (inserirlo nel file environment)

user: admin@example.com
pass: changeme




ELASTIC_PASSWORD=mb74U0tlgvCOr+O+nwTk



eyJ2ZXIiOiI4LjEwLjIiLCJhZHIiOlsiMTAuMTAuODQuMTA6OTIwMCJdLCJmZ3IiOiI0MzMyYzEyOWVhYTA0ZjBlOWNhZTczOWQwNjNlMzBlZjE3ZTZhNDU3MWJhMjk0MmRjNjVkNDA4NjFlODMzNzkzIiwia2V5IjoiWlYzZXRZd0JFUWxKVEhpam9NT3c6SVV6LWNWLXNRbm1hdk56b0ljOWJ1dyJ9









PUT _ilm/policy/mia_policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "set_priority": {
            "priority": 100
          }
        },
        "min_age": "0ms"
      },
      "warm": {
        "min_age": "1m",
        "actions": {
          "set_priority": {
            "priority": 50
          }
        }
      },
      "cold": {
        "min_age": "2m",
        "actions": {
          "set_priority": {
            "priority": 0
          }
        }
      }
    }
  }
}







------------- 
Partire da qui
Come creare le policy di svecchiamento

Create an index lifecycle policy
PEr farlo effettuare questa request




PUT _ilm/policy/mia_policy
{
  "policy": {
    "phases": {
      "hot": {
        "min_age": "0ms",
        "actions": {
          "set_priority": {
            "priority": 100
          },
          "rollover": {
            "max_age": "1d"
          }
        }
      },
      "warm": {
        "min_age": "60d",
        "actions": {
          "set_priority": {
            "priority": 50
          },
          "allocate": {
            "number_of_replicas": 0
          }
        }
      },
      "cold": {
        "min_age": "90d",
        "actions": {
          "set_priority": {
            "priority": 0
          },
          "allocate": {
            "number_of_replicas": 0
          }
        }
      }
    }
  }
}




Create a component templates

PUT _component_template/miocomponent
{
  "template": {
    "mappings": {
      "_source": {
        "enabled": true,
        "includes": [],
        "excludes": []
      },
      "_routing": {
        "required": false
      },
      "dynamic": true,
      "numeric_detection": false,
      "date_detection": true,
      "dynamic_date_formats": [
        "strict_date_optional_time",
        "yyyy/MM/dd HH:mm:ss Z||yyyy/MM/dd Z"
      ],
      "dynamic_templates": [],
      "properties": {
        "@timestamp": {
          "type": "date"
        },
        "measure": {
          "type": "text",
          "index": true,
          "index_options": "positions",
          "eager_global_ordinals": false,
          "index_phrases": false,
          "norms": true,
          "fielddata": false,
          "store": false
        },
        "measure_value": {
          "type": "double",
          "index": true,
          "ignore_malformed": false,
          "coerce": true,
          "doc_values": true,
          "store": false
        },
        "name": {
          "type": "keyword"
        },
        "unit_of_measurement": {
          "type": "keyword"
        }
      }
    }
  }
}



Create an index template
PUT _index_template/mioindex
{
  "template": {
    "settings": {
      "index": {
        "lifecycle": {
          "name": "mia_policy"
        }
      }
    },
    "mappings": {
      "dynamic": true,
      "numeric_detection": false,
      "date_detection": true,
      "dynamic_date_formats": [
        "strict_date_optional_time",
        "yyyy/MM/dd HH:mm:ss Z||yyyy/MM/dd Z"
      ],
      "_source": {
        "enabled": true,
        "includes": [],
        "excludes": []
      },
      "_routing": {
        "required": false
      },
      "dynamic_templates": []
    }
  },
  "index_patterns": [
    "index_test*"
  ],
  "data_stream": {
    "hidden": false,
    "allow_custom_routing": false
  },
  "composed_of": [
    "miocomponent"
  ]
}


Create datastream
PUT /_data_stream/my-data-stream



curl -u elastic:C6Ur2LK082SNOfGS3sO- https://10.10.84.10:9200/_data_stream/index_test_2_stream -XPUT -H 'Content-Type: application/json' -k






curl -u elastic:C6Ur2LK082SNOfGS3sO- https://10.10.84.10:9200/_data_stream/my-data-stream -XPUT -H 'Content-Type: application/json'